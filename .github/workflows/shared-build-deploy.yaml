on:
  workflow_call:
    inputs:
      app-name:
        required: true
        type: string
      app-resource-group:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_REGISTRY_NAME:
        required: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - name: Setup node 12
      uses: actions/setup-node@v3.5.1
      with:
        node-version: '12.x'

    - name: Cache node modules
      id: cache-node
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      if: steps.cache-node.outputs.cache-hit != 'true'
      run: |
        npm install --silent

    - name: Build site
      run:  npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Login to Container Registry
      run: az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.AZURE_REGISTRY_NAME }}/${{ inputs.app-name }}:${{ github.event.pull_request.head.sha || github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy_to_review:
    name: Deploy Review
    needs: [build]
    if: github.event_name == 'pull_request'
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment: 
      name: review-lab
      url: ${{ steps.review-web.outputs.webapp-url }}
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create deployment slot
      run: |
        az webapp deployment slot create --name ${{ inputs.app-name }} --resource-group ${{ inputs.app-resource-group }} --slot review-pr-${{ github.event.number }} --configuration-source ${{ inputs.app-name }}

    - name: Deploy popular repos
      uses: azure/webapps-deploy@v2
      id: review-web
      with:
        app-name: ${{ inputs.app-name }}
        images: '${{ secrets.AZURE_REGISTRY_NAME }}/${{ inputs.app-name }}:${{ github.event.pull_request.head.sha }}'
        slot-name: review-pr-${{ github.event.number }}

  deploy_to_staging:
    name: Deploy Staging
    needs: [build]
    if: github.event.ref == 'refs/heads/main'
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: ${{ steps.staging-web.outputs.webapp-url }}
    concurrency: staging
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy popular repos
      uses: azure/webapps-deploy@v2
      id: staging-web
      with:
        app-name: ${{ inputs.app-name }}
        images: '${{ secrets.AZURE_REGISTRY_NAME }}/${{ inputs.app-name }}:${{ github.sha }}'
        slot-name: staging

  deploy_to_production:
    name: Deploy Production
    if: github.event.ref == 'refs/heads/main'
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://${{inputs.app-name}}.azurewebsites.net
    concurrency: production
    needs: deploy_to_staging
    steps:
    - name: Azure login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name ${{ inputs.app-name }} --resource-group ${{ inputs.app-resource-group }} --slot staging --target-slot production
